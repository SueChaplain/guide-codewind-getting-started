Developing a simple app with VS Code

Table of Contents
I. Why VS Code?
II. Imnstall Codewind for VS Code
III. Use Appsody template
IV. Create project
V. Edit file
VI. Test new endpoint
VII. Debug app
VIII. Run app
IX. Nice work and where to next 

I. WHy VS Code? 
You can use Codewind for Visual Studio Code to develop and debug your containerizedprojects from within VS Code.

Write code, track application and build statuses, view project logs, and run your application.
Codewind for VS Code supports development of Microprofile/Java EE, Java Lagom, Spring, Node.js, Go, Python, Swift, and Appsody containerized projects.
In addition, the tools support easily debugging Microprofile/Java EE, Spring, and Node.js applications.

The VS Code tools are open source. You can browse the code, open issues, and contribute.

II. Install Codewind for VS Code
The Codewind installation includes two parts:
1. The VS Code extension installs when you install Codewind from the VS Code Marketplace or when you install by searching in the VS Code Extensions view.
2. The Codewind back end containers install after you click Install when you are prompted. After you click Install, the necessary images are downloaded from the internet. The download is approximately 1 GB.
3. Optional: If you don’t click Install when the notification window first appears, you can access the notification again. Go to the Explorer view, hover the cursor over Codewind, and click the switch so that it changes to the On position. The window appears.

The following images are pulled. These images together form the Codewind back end:
1. eclipse/codewind-initialize-amd64
2. eclipse/codewind-performance-amd64
3. eclipse/codewind-pfe-amd64
When the installation is complete, the extension is ready to use, and you area prompted to open the Codewind workspace. 

Codewind creates the `~/codewind-workspace` folder to contain your projects. 
On Windows, you can find the workspace at the `C:\codewind-workspace` folder. 
You can open the `codewind-workspace` or a project within the workspace as your VS Code workspace. 

III. Use Appsody template
Instructions here on how to retrieve and use Appsody’s templates. 

IV. Create project
NOTE: Users will work with the a Java application that comes with the VS Code installation. 
1. Make the new project your workspace folder. This project is the only project that you need to work on for this tutorial.
    * Right-click the project and select `Open Folder as Workspace.` VS Code restarts with the selected project folder as the workspace folder.
2. Open the Project Overview page to view project information.
    * Right-click the project and select `Show Project Overview.`

V. Edit file
1. Open a file to edit. For example, modify the health endpoint of the default Node.js project.
    * Open a Javascript file, such as `nodeproject/server/routers/health.js.`
    * Make a code change.
    * For example, you can add the following endpoint to `health.js` after the existing `GET `/ middleware function:
    * router.get('/test', function (req, res, next) {
    * return res.send("Yep, it worked!!");
    * });
    * Codewind detects the file changes and restarts your application.
        * In the Codewind tree, the application stops and starts again as the application server restarts.
        * You can also see nodemon restart the project in the application logs.
At this point, your VS Code should look similar to the following example: 

VI. Test default endpoint
1. To make sure your code change was picked up, test your new endpoint.
    * Right-click the project and select Open in Browser. The project root endpoint opens in the browser, and the IBM Cloud Starter page appears.
    * Navigate to the new endpoint. If you copied the previous snippet, add `/health/test/` to the URL.
    * See the new response: (screenshot image here)
 
 VII. Debug app
 1. You can debug your application within the container. To debug a containerized project, restart it in Debug mode.
    * Right-click the project and select Restart in Debug Mode.
    * The project restarts into the Debugging state.
    * A debug launch configuration is created in `nodeproject/.vscode/launch.json.`
    * The debugger attaches, and VS Code opens the Debug view.
    * You can detach and reattach the debugger at any time, as long as the project is still in Debug mode.
    
 2. All of the VS Code debug functionality is now available.
    * If your code matches the screenshot, set a breakpoint at line 13 in `health.js.`
    * Refresh the new endpoint page that you opened in step 7 so that a new request is made, and the breakpoint gets hit.
    
VS Code suspends your application at the breakpoint. Here you can step through the code, inspect variables, see the call stack, and evaluate expressions in the Debug Console.

VII. Run app
Instructions here on how to run the application the user just built. 

IX. Nice work and were to next
If you would also like to use Codewind with Eclipse Che or Eclipse, you may read instructions to install and work with those IDEs in this guide. 
To continue to learn about Codewind, visit Codewind API, https://eclipse.github.io/codewind/. 
