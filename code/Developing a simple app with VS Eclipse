Developing a simple app with Eclipse 

Table of contents
I. Why Eclipse?
II. Install Codewind for Eclipse
III. Use Appsody template
IV. Create project
V. Edit project files
VI. Test new endpoint
VII. Debug app
VIII. Run app
IX. Nice work and where to next 

I. Why Eclipse?
You can use Codewind for Eclipse to develop and debug your containerized projects from within Eclipse.

Use the Eclipse IDE to create and make modifications to your application, see the application and build status, view the logs, and run your application.
Codewind for Eclipse supports development of Microprofile/Java EE, Java Lagom, Spring, Node.js, Go, Python, Swift, and Appsody containerized projects. 
In addition, Microprofile/Java EE, Spring, and Node.js applications can be debugged.

The Eclipse tools are open source. You are encouraged to browse the code, open issues, and contribute.

II. Install Codewind for Eclipse 
The Codewind installation includes two parts:

1. The Eclipse plug-in installs when you install Codewind from the Eclipse Marketplace or when you install by searching in the Eclipse Extensions view.
2. The Codewind back end containers install after you click Install when you are prompted. After you click Install, the necessary images are downloaded from the internet. The download is approximately 1 GB.
3. Optional: If you don’t click Install when the notification window first appears, you can access the notification again. Go to the Explorer view, hover the cursor over Codewind, and click the switch so that it changes to the On position. The window appears.

The following images are pulled. These images together form the Codewind back end:

1. eclipse/codewind-initialize-amd64
2. eclipse/codewind-performance-amd64
3. eclipse/codewind-pfe-amd64

When the installation is complete, the extension is ready to use, and you are prompted to open the Codewind workspace. 

Codewind creates the `~/codewind-workspace` folder to contain your projects.
On Windows, you can find the workspace at the `C:\codewind-workspace` folder. 
You can open the `codewind-workspace` or a project within the workspace as your Eclipse workspace. 

III. Use Appsody template
Instructions here on how to retrieve and use Appsody’s templates. 

IV. Create project
NOTE: users will work with the Java application that comes with the Eclipse installation.

You can work with your Codewind projects from the Codewind Explorer view in Eclipse.
If the view is not showing, open it as follows:

1. From the Window menu select Show View > Other.
2. Start to type Codewind in the filter field or locate and expand the Codewind entry in the list.
3. Select Codewind Explorer and click Open.

To create a new project or import an existing one, use the context menu on the Local Projects item in the Codewind Explorer view. 
Once you have a project, the first thing you might want to do is import your project into the Eclipse workspace so you can start editing files.
This also makes your source available for debugging.

Each project shows the application status and the build status. 
A context menu on each project enables you to open your application in a browser, view application and build logs, restart in debug mode, and much more.

When auto build is enabled for a project, Codewind for Eclipse detects when you make a change and starts a build automatically.
If you have disabled auto build for the project, you can start a build manually when you have made a change or a set of changes:

1. Right-click your project in the Codewind Explorer view and select Build.
2. Wait for the project state to return to Running or Debugging in the Codewind Explorer view and then test your changes.

V. Edit project files
Editing actions are available by right clicking on the project in the Codewind Explorer view.
Most actions are only available if the project is enabled.

Some actions open the default Eclipse browser. 
If you find that the default Eclipse browser cannot handle the content, change the default browser by navigating to Window > Web Browser and selecting a different browser from the list.

Project settings tell Codewind more about the specifics of your project and can affect the status and/or behavior of your application. 
You can configure project settings when you:

1. Go to Project Overview page that is accessible from a project’s context menu, or, 
2. Find the project settings in the .cw-settings file of the project which you can edit from the IDE. Changes to these fields are automatically picked up by the workspace.

VI. Test new endpoint
Instructions here on how to test the new endpoint

VII. Debug app
Codewind for Eclipse supports debugging Microprofile/Java EE and Spring projects.
The tools also help you set up a debug session for Node.js projects in a Chromium based browser.

Debugging Microprofile/Java EE and Spring projects:
Prerequisites:

1. If you have not done so already, import your project into Eclipse to make the source available to debug.
    * Right-click your project in the Codewind Explorer view.
    * Select Import Project.
2. If you need to debug any initialization code, set breakpoints in this code now. You can also set breakpoints in your application code at this time.
3. [Optional] If you want to use Java hot code replace and change your code while you debug, disable automatic builds.
    * To disable automatic builds, right-click your project in the Codewind Explorer view and select Disable Auto Build.
    * If you want to start a build while automatic builds are disabled, right-click your project and select Build.
    * Enable automatic builds again after you finish debugging. To enable automatic builds again, right-click your project and select Enable Auto Build.
    
 Debugging:
 1. To restart your Microprofile/Java EE or Spring application in debug mode, right-click on the project in the Codewind Explorer view and select Restart in Debug Mode.
 2. If you did not import your project into Eclipse you are prompted to do so now. Select one of the following:
    * Yes: To import your project into Eclipse and make the source available for debugging.
    * No: To continue restarting in debug mode without importing your project. There might be no source available for debugging if you choose this option.
    * Cancel: To cancel restarting your application in debug mode.
 3. Wait for the project state to change to Debugging or for the debugger to stop at a breakpoint if you are debugging initialization code. If you have hit a breakpoint in initialization code, skip to step 6.
 4. If you have not done so already, set up any breakpoints that you need in your application.
 5. 
